'use client';

import Header from '@/components/Header';
import Footer from '@/components/Footer';
import CurrencySymbol from '@/components/CurrencySymbol';
import LoadingSpinner from '@/components/LoadingSpinner';
import { useState, useEffect, useRef } from 'react';
import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import Script from 'next/script';
import { getCart, clearCart, type Cart, type CartItem } from '../../utils/cart';
import { calculateTaxes, fetchTaxSettings } from '../../utils/taxUtils';

declare global {
  interface Window {
    google: any;
  }
}

export default function CheckoutPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  
  // Form states
  const [name, setName] = useState('');
  const [phone, setPhone] = useState('');
  const [address, setAddress] = useState('');
  const [city, setCity] = useState('');
  const [state, setState] = useState('');
  const [postalCode, setPostalCode] = useState('');
  const [serviceDate, setServiceDate] = useState('');
  const [serviceTime, setServiceTime] = useState('');
  const [specialInstructions, setSpecialInstructions] = useState('');
  const [cart, setCart] = useState<Cart>({ items: [], total: 0, itemCount: 0 });
  
  // UI states
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState('');
  const [googleMapsLoaded, setGoogleMapsLoaded] = useState(false);
  const [showMap, setShowMap] = useState(false);
  const [mapCenter, setMapCenter] = useState({ lat: 25.2048, lng: 55.2708 }); // Dubai coordinates
  const [isInitializingAutocomplete, setIsInitializingAutocomplete] = useState(false);
  
  // Google Maps refs
  const addressInputRef = useRef<HTMLInputElement>(null);
  const autocompleteRef = useRef<any>(null);
  const mapRef = useRef<any>(null);
  const markerRef = useRef<any>(null);

  const [taxSettings, setTaxSettings] = useState<{
    vatTax: { enabled: boolean; type: 'percentage' | 'fixed'; value: number };
    serviceTax: { enabled: boolean; type: 'percentage' | 'fixed'; value: number };
  } | null>(null);

  const [totalTaxCalculation, setTotalTaxCalculation] = useState<{
    vatAmount: number;
    serviceAmount: number;
    totalTaxAmount: number;
    finalAmount: number;
  }>({
    vatAmount: 0,
    serviceAmount: 0,
    totalTaxAmount: 0,
    finalAmount: 0,
  });

  // Check authentication and load cart
  useEffect(() => {
    if (status === 'loading') return;
    
    if (!session) {
      router.push('/login-register');
      return;
    }

    // Load cart
    const currentCart = getCart();
    setCart(currentCart);
    
    if (currentCart.items.length === 0) {
      router.push('/');
      return;
    }

    // Pre-fill form with user data
    if (session.user) {
      setName(session.user.name || '');
      // Fetch additional user profile data
      fetchUserProfile();
    }
  }, [session, status, router]);

  // Fetch user profile data to pre-populate form
  const fetchUserProfile = async () => {
    try {
      const response = await fetch('/api/user/profile');
      if (response.ok) {
        const data = await response.json();
        const userData = data.profile || data; // Handle both nested and direct response
        console.log('Fetched user profile:', userData);
        
        // Auto-fill form fields from user data
        setPhone(userData.phone || '');
        setCity(userData.city || '');
        setState(userData.state || '');
        setPostalCode(userData.postalCode || '');
        
        // Handle address separately to avoid conflicts with autocomplete
        if (userData.address && userData.address.trim().length > 0) {
          setAddress(userData.address);
          
          // Only try to geocode if Google Maps is loaded and we have a valid address
          if (googleMapsLoaded && userData.address.trim().length > 5) {
            // Add a small delay to avoid conflicts with autocomplete initialization
            setTimeout(() => {
              geocodeAddress(userData.address);
            }, 1000);
          }
        }
      } else {
        console.log('Failed to fetch user profile:', response.status);
      }
    } catch (error) {
      console.error('Error fetching user profile:', error);
    }
  };

  // Geocode address to get coordinates with proper error handling
  const geocodeAddress = (address: string) => {
    if (!window.google || !address || address.trim().length < 5) {
      console.log('Skipping geocoding: insufficient data or Google Maps not loaded');
      return;
    }
    
    const geocoder = new window.google.maps.Geocoder();
    
    // Add a timeout to prevent hanging requests
    const geocodePromise = new Promise((resolve, reject) => {
      geocoder.geocode(
        { 
          address: address.trim(),
          region: 'AE' // Bias results to UAE
        }, 
        (results: any, status: any) => {
          if (status === 'OK' && results && results[0]) {
            const location = results[0].geometry.location;
            setMapCenter({ lat: location.lat(), lng: location.lng() });
            console.log('Successfully geocoded address:', address);
            resolve(results[0]);
          } else {
            console.warn('Geocoding failed:', status, 'for address:', address);
            reject(new Error(`Geocoding failed: ${status}`));
          }
        }
      );
    });

    // Set a 5-second timeout for geocoding
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Geocoding timeout')), 5000);
    });

    Promise.race([geocodePromise, timeoutPromise])
      .catch(error => {
        console.error('Geocoding error:', error);
        // Don't show error to user, just fall back to default Dubai coordinates
        setMapCenter({ lat: 25.2048, lng: 55.2708 });
      });
  };

  // Initialize Google Maps Autocomplete with better error handling
  const initializeAutocomplete = () => {
    if (!window.google || !addressInputRef.current || isInitializingAutocomplete) {
      console.log('Cannot initialize autocomplete: Google Maps not loaded, input ref not available, or already initializing');
      return;
    }

    setIsInitializingAutocomplete(true);

    try {
      // Clear any existing autocomplete
      if (autocompleteRef.current) {
        window.google.maps.event.clearInstanceListeners(autocompleteRef.current);
      }

      const autocomplete = new window.google.maps.places.Autocomplete(
        addressInputRef.current,
        {
          types: ['address'],
          componentRestrictions: { country: 'ae' }, // Restrict to UAE addresses
          fields: ['formatted_address', 'geometry', 'address_components'] // Limit fields to reduce quota usage
        }
      );

      autocomplete.addListener('place_changed', () => {
        try {
          const place = autocomplete.getPlace();
          
          // Validate place object
          if (!place || !place.formatted_address) {
            console.log('Invalid place selected from autocomplete');
            return;
          }

          setAddress(place.formatted_address);
          
          // Update map center if place has geometry
          if (place.geometry && place.geometry.location) {
            const location = place.geometry.location;
            const lat = typeof location.lat === 'function' ? location.lat() : location.lat;
            const lng = typeof location.lng === 'function' ? location.lng() : location.lng;
            setMapCenter({ lat, lng });
          }
          
          // Parse address components safely
          if (place.address_components && Array.isArray(place.address_components)) {
            let city = '';
            let state = '';
            let postalCode = '';
            
            place.address_components.forEach((component: any) => {
              if (!component || !component.types) return;
              
              const types = component.types;
              if (types.includes('locality') || types.includes('administrative_area_level_2')) {
                city = component.long_name || '';
              } else if (types.includes('administrative_area_level_1')) {
                state = component.long_name || '';
              } else if (types.includes('postal_code')) {
                postalCode = component.long_name || '';
              }
            });
            
            setCity(city);
            setState(state);
            setPostalCode(postalCode);
          }
        } catch (error) {
          console.error('Error in autocomplete place_changed listener:', error);
        }
      });

      autocompleteRef.current = autocomplete;
      console.log('Autocomplete initialized successfully');
    } catch (error) {
      console.error('Error initializing autocomplete:', error);
    } finally {
      setIsInitializingAutocomplete(false);
    }
  };

  // Initialize map with proper error handling
  const initializeMap = () => {
    if (!window.google || !showMap) {
      console.log('Skipping map initialization: Google Maps not loaded or map not shown');
      return;
    }

    try {
      // Create map instance if it doesn't exist
      if (!mapRef.current) {
        mapRef.current = new window.google.maps.Map(
          document.getElementById('map-canvas'),
          {
            center: mapCenter,
            zoom: 15,
            mapTypeControl: false,
            streetViewControl: false,
            fullscreenControl: false
          }
        );
      } else {
        // Update existing map
        mapRef.current.setCenter(mapCenter);
      }

      // Create or update marker
      if (!markerRef.current) {
        markerRef.current = new window.google.maps.Marker({
          position: mapCenter,
          map: mapRef.current,
          draggable: true,
          animation: window.google.maps.Animation.DROP
        });

        // Add marker drag event listener
        markerRef.current.addListener('dragend', () => {
          try {
            const position = markerRef.current.getPosition();
            const lat = position.lat();
            const lng = position.lng();
            
            // Update map center
            setMapCenter({ lat, lng });
            
            // Reverse geocode new position
            const geocoder = new window.google.maps.Geocoder();
            geocoder.geocode(
              { 
                location: { lat, lng },
                region: 'AE'
              },
              (results: any, status: any) => {
                if (status === 'OK' && results && results[0]) {
                  setAddress(results[0].formatted_address);
                  
                  // Parse address components
                  if (results[0].address_components && Array.isArray(results[0].address_components)) {
                    let city = '';
                    let state = '';
                    let postalCode = '';
                    
                    results[0].address_components.forEach((component: any) => {
                      if (!component || !component.types) return;
                      
                      const types = component.types;
                      if (types.includes('locality') || types.includes('administrative_area_level_2')) {
                        city = component.long_name || '';
                      } else if (types.includes('administrative_area_level_1')) {
                        state = component.long_name || '';
                      } else if (types.includes('postal_code')) {
                        postalCode = component.long_name || '';
                      }
                    });
                    
                    setCity(city);
                    setState(state);
                    setPostalCode(postalCode);
                  }
                }
              }
            );
          } catch (error) {
            console.error('Error handling marker drag:', error);
          }
        });
      } else {
        // Update existing marker
        markerRef.current.setPosition(mapCenter);
      }
    } catch (error) {
      console.error('Error initializing map:', error);
    }
  };

  // Handle Google Maps script load
  const handleGoogleMapsLoad = () => {
    console.log('Google Maps script loaded');
    setGoogleMapsLoaded(true);
    
    // Initialize autocomplete
    initializeAutocomplete();
    
    // Initialize map if it's shown
    if (showMap) {
      initializeMap();
    }
  };

  // Update map when showMap changes
  useEffect(() => {
    if (showMap && googleMapsLoaded) {
      // Add a small delay to ensure DOM is ready
      setTimeout(initializeMap, 100);
    }
  }, [showMap, mapCenter, googleMapsLoaded]);

  // Fetch tax settings
  useEffect(() => {
    const getTaxSettings = async () => {
      try {
        const settings = await fetchTaxSettings();
        setTaxSettings(settings);
        
        // Calculate initial taxes
        if (settings && cart.total > 0) {
          const taxCalc = calculateTaxes(cart.total, settings);
          setTotalTaxCalculation(taxCalc);
        }
      } catch (error) {
        console.error('Error fetching tax settings:', error);
      }
    };
    
    getTaxSettings();
  }, [cart.total]);

  // Handle form submission
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (loading) return;
    setLoading(true);
    setError('');
    
    try {
      // Basic validation
      if (!name || !phone || !address) {
        throw new Error('Please fill in all required fields');
      }
      
      // Prepare order data
      const orderData = {
        name,
        phone,
        address,
        city,
        state,
        postalCode,
        serviceDate,
        serviceTime,
        specialInstructions,
        items: cart.items,
        subtotal: cart.total,
        vatAmount: totalTaxCalculation.vatAmount,
        serviceAmount: totalTaxCalculation.serviceAmount,
        totalAmount: totalTaxCalculation.finalAmount
      };
      
      // Submit order
      const response = await fetch('/api/checkout', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(orderData),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to place order');
      }
      
      const data = await response.json();
      
      // Clear cart
      clearCart();
      
      // Show success message
      setSuccess('Order placed successfully!');
      
      // Redirect to order confirmation
      router.push(`/dashboard/orders/${data.orderId}`);
      
    } catch (error: any) {
      console.error('Checkout error:', error);
      setError(error.message || 'An error occurred while placing your order');
    } finally {
      setLoading(false);
    }
  };

  // Format price with currency symbol
  const formatPrice = (price: number) => {
    return (
      <>
        <CurrencySymbol />
        {price.toFixed(2)}
      </>
    );
  };

  // Show loading state
  if (loading) {
    return (
      <>
        <Header />
        <div className="container py-5 text-center">
          <LoadingSpinner />
          <p className="mt-3">Processing your order...</p>
        </div>
      </>
    );
  }

  return (
    <>
      <Header />
      {/* Google Maps API */}
      <Script
        src={`https://maps.googleapis.com/maps/api/js?key=AIzaSyBsxw1IkvR-PMohWJRSVLpc4-tbwDknHK8&libraries=places`}
        onLoad={handleGoogleMapsLoad}
      />

      {/* Checkout Section */}
      <section className="space-extra-bottom">
        <div className="container">
          <div className="row">
            {/* Checkout Form */}
            <div className="col-lg-8">
              <div className="page-single">
                <div className="page-content">
                  <div className="auth-card mb-4">
                    <div className="auth-card-body p-4">
                      <h3 className="mb-4">Billing Information</h3>
                      
                      {error && (
                        <div className="alert alert-danger mb-4">
                          {error}
                        </div>
                      )}

                      <form onSubmit={handleSubmit}>
                        <div className="row">
                          <div className="col-md-12 mb-3">
                            <label className="form-label">
                              Full Name <span className="text-danger">*</span>
                            </label>
                            <input
                              type="text"
                              className="form-control"
                              value={name}
                              onChange={(e) => setName(e.target.value)}
                              placeholder="Enter your full name"
                              required
                            />
                          </div>

                          <div className="col-md-6 mb-3">
                            <label className="form-label">
                              Email Address
                            </label>
                            <input
                              type="email"
                              className="form-control"
                              value={session.user?.email || ''}
                              disabled
                            />
                            <small className="text-muted">From your account</small>
                          </div>

                          <div className="col-md-6 mb-3">
                            <label className="form-label">
                              Phone Number <span className="text-danger">*</span>
                            </label>
                            <input
                              type="tel"
                              className="form-control"
                              value={phone}
                              onChange={(e) => setPhone(e.target.value)}
                              placeholder="Enter your phone number"
                              required
                            />
                          </div>

                          <div className="col-12 mb-3">
                            <label className="form-label">
                              Address <span className="text-danger">*</span>
                            </label>
                            <input
                              ref={addressInputRef}
                              type="text"
                              className="form-control"
                              value={address}
                              onChange={(e) => setAddress(e.target.value)}
                              placeholder="Start typing your address..."
                              required
                            />
                            <small className="text-muted">
                              <i className="fas fa-map-marker-alt me-1"></i>
                              Start typing and select from suggestions
                            </small>
                            
                            <div className="mt-2">
                              <button
                                type="button"
                                className="btn btn-outline-primary btn-sm"
                                onClick={() => setShowMap(!showMap)}
                              >
                                <i className={`fas ${showMap ? 'fa-eye-slash' : 'fa-map-marked-alt'} me-1`}></i>
                                {showMap ? 'Hide Map' : 'Show Map & Pin Location'}
                              </button>
                            </div>
                            
                            {showMap && (
                              <div className="map-container mt-3">
                                <div id="map-canvas" style={{ height: '300px', width: '100%' }}></div>
                                <div className="d-flex justify-content-between align-items-center mt-2">
                                  <small className="text-muted">
                                    <i className="fas fa-hand-pointer me-1"></i>
                                    Drag the pin to select your exact location
                                  </small>
                                  <button
                                    type="button"
                                    className="btn btn-outline-secondary btn-sm"
                                    onClick={() => {
                                      if (navigator.geolocation) {
                                        navigator.geolocation.getCurrentPosition(
                                          (position) => {
                                            const { latitude, longitude } = position.coords;
                                            setMapCenter({ lat: latitude, lng: longitude });
                                          },
                                          (error) => {
                                            console.error('Error getting location:', error);
                                          }
                                        );
                                      }
                                    }}
                                  >
                                    <i className="fas fa-location-arrow me-1"></i>
                                    Use My Location
                                  </button>
                                </div>
                              </div>
                            )}
                          </div>

                          <div className="col-md-6 mb-3">
                            <label className="form-label">City</label>
                            <input
                              type="text"
                              className="form-control"
                              value={city}
                              onChange={(e) => setCity(e.target.value)}
                              placeholder="City"
                            />
                          </div>

                          <div className="col-md-6 mb-3">
                            <label className="form-label">State/Emirate</label>
                            <input
                              type="text"
                              className="form-control"
                              value={state}
                              onChange={(e) => setState(e.target.value)}
                              placeholder="State/Emirate"
                            />
                          </div>

                          <div className="col-md-6 mb-3">
                            <label className="form-label">Postal Code</label>
                            <input
                              type="text"
                              className="form-control"
                              value={postalCode}
                              onChange={(e) => setPostalCode(e.target.value)}
                              placeholder="Postal Code"
                            />
                          </div>

                          <div className="col-md-6 mb-3">
                            <label className="form-label">
                              Service Date <span className="text-danger">*</span>
                            </label>
                            <input
                              type="date"
                              className="form-control"
                              value={serviceDate}
                              onChange={(e) => setServiceDate(e.target.value)}
                              min={new Date().toISOString().split('T')[0]}
                              required
                            />
                          </div>

                          <div className="col-md-6 mb-3">
                            <label className="form-label">
                              Preferred Time <span className="text-danger">*</span>
                            </label>
                            <select
                              className="form-select"
                              value={serviceTime}
                              onChange={(e) => setServiceTime(e.target.value)}
                              required
                            >
                              <option value="">Select a time slot</option>
                              <option value="morning">Morning (9 AM - 12 PM)</option>
                              <option value="afternoon">Afternoon (12 PM - 3 PM)</option>
                              <option value="evening">Evening (3 PM - 6 PM)</option>
                            </select>
                          </div>

                          <div className="col-12 mb-3">
                            <label className="form-label">Special Instructions</label>
                            <textarea
                              className="form-control"
                              value={specialInstructions}
                              onChange={(e) => setSpecialInstructions(e.target.value)}
                              placeholder="Any special instructions for the service provider..."
                              rows={3}
                            ></textarea>
                          </div>
                        </div>

                        <div className="mt-4">
                          <button
                            type="submit"
                            className="btn btn-primary"
                            disabled={loading}
                          >
                            {loading ? (
                              <>
                                <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                Processing...
                              </>
                            ) : (
                              'Place Order'
                            )}
                          </button>
                        </div>
                      </form>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            {/* Order Summary */}
            <div className="col-lg-4">
              <div className="auth-card mb-4">
                <div className="auth-card-body p-4">
                  <h3 className="mb-4">Order Summary</h3>
                  
                  {cart.items.map((item, index) => (
                    <div key={index} className="d-flex justify-content-between mb-3">
                      <div>
                        <h6 className="mb-1">{item.name}</h6>
                        <small className="text-muted">Quantity: {item.quantity}</small>
                      </div>
                      <div className="text-end">
                        <h6 className="mb-1">{formatPrice(item.price * item.quantity)}</h6>
                      </div>
                    </div>
                  ))}

                  <hr className="my-4" />

                  <div className="d-flex justify-content-between mb-2">
                    <span>Subtotal</span>
                    <span>{formatPrice(cart.total)}</span>
                  </div>

                  {taxSettings?.vatTax.enabled && (
                    <div className="d-flex justify-content-between mb-2">
                      <span>VAT ({taxSettings.vatTax.value}%)</span>
                      <span>{formatPrice(totalTaxCalculation.vatAmount)}</span>
                    </div>
                  )}

                  {taxSettings?.serviceTax.enabled && (
                    <div className="d-flex justify-content-between mb-2">
                      <span>Service Tax ({taxSettings.serviceTax.value}%)</span>
                      <span>{formatPrice(totalTaxCalculation.serviceAmount)}</span>
                    </div>
                  )}

                  <div className="d-flex justify-content-between mt-4">
                    <h5>Total</h5>
                    <h5>{formatPrice(totalTaxCalculation.finalAmount)}</h5>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </section>
    </>
  );
} 